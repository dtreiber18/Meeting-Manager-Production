# Spring Boot Application Configuration
spring:
  application:
    name: meeting-manager
  profiles:
    active: ${SPRING_PROFILES_ACTIVE:dev}
  
  # Database Configuration - MySQL for production
  datasource:
    url: ${DB_URL:jdbc:mysql://localhost:3306/meeting_manager?useSSL=false&allowPublicKeyRetrieval=true&serverTimezone=UTC}
    username: ${DB_USERNAME:meetingmanager}
    password: ${DB_PASSWORD:password}
    driver-class-name: com.mysql.cj.jdbc.Driver
    hikari:
      maximum-pool-size: 20
      minimum-idle: 5
      idle-timeout: 300000
      max-lifetime: 1200000
      connection-timeout: 20000
  
  # JPA Configuration
  jpa:
    hibernate:
      ddl-auto: ${JPA_DDL_AUTO:update}
    show-sql: ${JPA_SHOW_SQL:false}
    open-in-view: true
    properties:
      hibernate:
        format_sql: true
        use_sql_comments: true
        generate_statistics: false
  
  # MongoDB Configuration
  data:
    mongodb:
      uri: ${MONGODB_URI:mongodb://localhost:27017/meeting_manager}
      auto-index-creation: true
    # Redis Configuration
    redis:
      host: ${REDIS_HOST:localhost}
      port: ${REDIS_PORT:6379}
      password: ${REDIS_PASSWORD:}
      timeout: 2000ms
      lettuce:
        pool:
          max-active: 8
          max-idle: 8
          min-idle: 0
          max-wait: -1ms
  
  # Security Configuration
  security:
    oauth2:
      resourceserver:
        jwt:
          issuer-uri: ${OAUTH2_ISSUER_URI:}
          audiences: ${OAUTH2_AUDIENCES:}
  
  # Jackson Configuration
  jackson:
    parser:
      allow-trailing-comma: true
      strict-duplicate-detection: false

  # File Upload Configuration
  servlet:
    multipart:
      max-file-size: ${MAX_FILE_SIZE:50MB}
      max-request-size: ${MAX_REQUEST_SIZE:50MB}
      enabled: true
  
  # Cache Configuration
  cache:
    type: redis
    redis:
      time-to-live: 600000
      cache-null-values: false

# Application-specific Configuration
app:
  # CORS Configuration
  cors:
    allowed-origins: ${CORS_ALLOWED_ORIGINS:http://localhost:4200,https://dtreiber18.github.io}
    allowed-methods: ${CORS_ALLOWED_METHODS:GET,POST,PUT,DELETE,OPTIONS,HEAD,PATCH}
    allowed-headers: ${CORS_ALLOWED_HEADERS:*}
    allow-credentials: ${CORS_ALLOW_CREDENTIALS:true}
  
  # JWT Configuration
  jwt:
    secret: ${JWT_SECRET:C8oebVYJ6beuAlXwAX0Vf6llLgnHN/6NbnN0p6fGR0I=}
    expiration: ${JWT_EXPIRATION:86400000} # 24 hours
  frontend-url: ${FRONTEND_URL:http://localhost:4200}
  microsoft:
    graph:
      enabled: true
      base-url: https://graph.microsoft.com/v1.0
      client-id: ${MICROSOFT_CLIENT_ID:your-microsoft-client-id-here}
      client-secret: ${MICROSOFT_CLIENT_SECRET:your-microsoft-client-secret-here}
      tenant-id: ${MICROSOFT_TENANT_ID:your-microsoft-tenant-id-here}
      redirect-uri: ${MICROSOFT_REDIRECT_URI:http://localhost:4200/auth/callback}
      login-base-url: https://login.microsoftonline.com

# Azure OpenAI Configuration
azure:
  openai:
    endpoint: ${AZURE_OPENAI_ENDPOINT:https://your-openai-resource.openai.azure.com/}
    api-key: ${AZURE_OPENAI_API_KEY:your-api-key-here}
    deployment-name: ${AZURE_OPENAI_DEPLOYMENT_NAME:gpt-35-turbo}
    api-version: ${AZURE_OPENAI_API_VERSION:2024-02-15-preview}
  
# JWT Configuration (for backward compatibility)
jwt:
  secret: ${JWT_SECRET:C8oebVYJ6beuAlXwAX0Vf6llLgnHN/6NbnN0p6fGR0I=}
  expiration: 86400000 # 24 hours
  
# Management Endpoints
management:
  endpoints:
    web:
      exposure:
        include: health,info,metrics,prometheus
  endpoint:
    health:
      show-details: when-authorized
  prometheus:
    metrics:
      export:
        enabled: true

# N8N Integration Configuration
# To enable N8N integration:
# 1. Set N8N_ENABLED=true environment variable OR change enabled: true below
# 2. Operations webhook is pre-configured (handles events, operations, approve/reject)
# 3. Notes webhook is used for processing meeting content
# See N8N_SETUP_GUIDE.md for detailed setup instructions
n8n:
  enabled: ${N8N_ENABLED:true}  # Set to 'true' to enable N8N integration
  webhook:
    operations-url: ${N8N_OPERATIONS_WEBHOOK_URL:https://g37-ventures1.app.n8n.cloud/webhook/operations}
    notes-url: ${N8N_NOTES_WEBHOOK_URL:https://g37-ventures1.app.n8n.cloud/webhook/notes}
  api:
    key: ${N8N_API_KEY:}  # Optional: Bearer token for N8N authentication

# Cloud Storage Configuration
help:
  default:
    storage:
      provider: ${HELP_STORAGE_PROVIDER:ONEDRIVE}

# Fathom Integration Configuration
# Fathom is a note-taking app that can send webhooks when meetings are transcribed
# To enable Fathom integration:
# 1. Set FATHOM_ENABLED=true environment variable OR change enabled: true below
# 2. Set FATHOM_WEBHOOK_SECRET to the secret provided by Fathom in webhook settings
# 3. Configure Fathom webhook URL to point to: https://your-domain.com/api/webhooks/fathom
# 4. Enable "newMeeting" event in Fathom webhook settings
# 5. Set FATHOM_API_KEY to enable API polling (alternative to webhooks)
fathom:
  enabled: ${FATHOM_ENABLED:false}  # Set to 'true' to enable Fathom integration
  webhook:
    secret: ${FATHOM_WEBHOOK_SECRET:}  # Required: HMAC SHA-256 secret from Fathom
  api:
    enabled: ${FATHOM_API_ENABLED:false}  # Set to 'true' to enable API polling
    key: ${FATHOM_API_KEY:}  # Required: API key from Fathom dashboard
    base-url: ${FATHOM_API_BASE_URL:https://api.fathom.ai/external/v1}

# Logging Configuration
logging:
  level:
    com.g37.meetingmanager: INFO
    org.springframework.security: DEBUG
    org.springframework.web: INFO
  pattern:
    console: "%d{HH:mm:ss.SSS} [%thread] %-5level %logger{36} - %msg%n"

# Server Configuration
server:
  port: ${PORT:8080}