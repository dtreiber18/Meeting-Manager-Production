name: Meeting Manager CI/CD

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  AZURE_CONTAINER_REGISTRY: ${{ vars.AZURE_CONTAINER_REGISTRY }}
  CONTAINER_NAME_FRONTEND: meeting-manager-frontend
  CONTAINER_NAME_BACKEND: meeting-manager-backend
  RESOURCE_GROUP: ${{ vars.AZURE_RESOURCE_GROUP }}

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
    
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
    
    # Frontend build and test
    - name: Install frontend dependencies
      working-directory: frontend
      run: npm ci
    
    - name: Lint frontend
      working-directory: frontend
      run: npm run lint
    
    - name: Test frontend
      working-directory: frontend
      run: npm run test:ci
    
    - name: Build frontend
      working-directory: frontend
      run: npm run build
    
    # Backend build and test
    - name: Cache Maven packages
      uses: actions/cache@v4
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2
    
    - name: Test backend
      working-directory: backend
      run: mvn clean test
    
    - name: Build backend
      working-directory: backend
      run: mvn clean package -DskipTests
    
    # SonarQube Analysis (Optional - only runs if token is configured)
    - name: SonarQube Scan
      if: ${{ env.SONAR_TOKEN != '' }}
      uses: sonarsource/sonarqube-scan-action@master
      env:
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        SONAR_HOST_URL: ${{ vars.SONAR_HOST_URL || 'https://sonarcloud.io' }}

  build-and-push-images:
    needs: build-and-test
    runs-on: ubuntu-latest
    if: |
      (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop') &&
      secrets.AZURE_REGISTRY_USERNAME != '' &&
      secrets.AZURE_REGISTRY_PASSWORD != '' &&
      vars.AZURE_CONTAINER_REGISTRY != ''
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Log in to Azure Container Registry
      uses: azure/docker-login@v1
      with:
        login-server: ${{ env.AZURE_CONTAINER_REGISTRY }}
        username: ${{ secrets.AZURE_REGISTRY_USERNAME }}
        password: ${{ secrets.AZURE_REGISTRY_PASSWORD }}
    
    - name: Build and push frontend image
      working-directory: frontend
      run: |
        docker build -t ${{ env.AZURE_CONTAINER_REGISTRY }}/${{ env.CONTAINER_NAME_FRONTEND }}:${{ github.sha }} .
        docker push ${{ env.AZURE_CONTAINER_REGISTRY }}/${{ env.CONTAINER_NAME_FRONTEND }}:${{ github.sha }}
    
    - name: Build and push backend image
      working-directory: backend
      run: |
        docker build -t ${{ env.AZURE_CONTAINER_REGISTRY }}/${{ env.CONTAINER_NAME_BACKEND }}:${{ github.sha }} .
        docker push ${{ env.AZURE_CONTAINER_REGISTRY }}/${{ env.CONTAINER_NAME_BACKEND }}:${{ github.sha }}

  deploy-to-azure:
    needs: build-and-push-images
    runs-on: ubuntu-latest
    if: |
      github.ref == 'refs/heads/main' &&
      secrets.AZURE_CREDENTIALS != '' &&
      vars.AZURE_RESOURCE_GROUP != ''
    
    steps:
    - uses: actions/checkout@v4
    
    # Only deploy if Azure credentials are configured
    - name: Azure Login
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}
    
    - name: Deploy to Azure Container Apps
      run: |
        # Update frontend container app
        az containerapp update \
          --name meeting-manager-frontend \
          --resource-group ${{ env.RESOURCE_GROUP }} \
          --image ${{ env.AZURE_CONTAINER_REGISTRY }}/${{ env.CONTAINER_NAME_FRONTEND }}:${{ github.sha }}
        
        # Update backend container app
        az containerapp update \
          --name meeting-manager-backend \
          --resource-group ${{ env.RESOURCE_GROUP }} \
          --image ${{ env.AZURE_CONTAINER_REGISTRY }}/${{ env.CONTAINER_NAME_BACKEND }}:${{ github.sha }}

  security-scan:
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Run OWASP ZAP Baseline Scan
      uses: zaproxy/action-baseline@v0.10.0
      with:
        target: 'http://localhost:4200'
    
    - name: Upload ZAP results
      uses: actions/upload-artifact@v4
      with:
        name: zap-results
        path: report_html.html